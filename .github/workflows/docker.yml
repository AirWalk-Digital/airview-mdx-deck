name: Docker Build

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write


jobs: 

  version_bump:
    name: Build and publish Docker images
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install semver

      # - name: Bump version based on PR info (version.txt)
      #   id: version_bump
      #   run: |
      #     PR_TITLE="${{ github.event.pull_request.title }}"
      #     PR_BODY="${{ github.event.pull_request.body }}"
      #     VERSION_TYPE="patch"
      #     if [[ "$PR_TITLE" == *"[major]"* ]] || [[ "$PR_BODY" == *"[major]"* ]]; then
      #       VERSION_TYPE="major"
      #     fi
      #     echo "Bumping $VERSION_TYPE version"
      #     CURRENT_VERSION=$(cat version.txt)
      #     NEW_VERSION=$(python -c "import semver; print(semver.bump_$VERSION_TYPE('$CURRENT_VERSION'))")
      #     echo $NEW_VERSION > version.txt
      #     echo "::set-output name=version::$NEW_VERSION"

      - name: Bump version based on PR info (package.json)
        id: version_bump
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          VERSION_TYPE="patch"
          if [[ "$PR_TITLE" == *"[major]"* ]] || [[ "$PR_BODY" == *"[major]"* ]]; then
            VERSION_TYPE="major"
          fi
          echo "Bumping $VERSION_TYPE version"
          NEW_VERSION=$(python -c "
import json, semver
with open('./package.json', 'r') as f:
  package_json = json.load(f)
  current_version = package_json['version']
  new_version = semver.bump_major(current_version)
  package_json['version'] = new_version
with open('./package.json', 'w') as f:
  json.dump(package_json, f, indent=2)
print(new_version)
            ")
          echo "::set-output name=version::$NEW_VERSION"


      - name: Commit and tag new version
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          git add version.txt
          git commit -m "Bump version to ${{ steps.version_bump.outputs.version }}"
          git tag "v${{ steps.version_bump.outputs.version }}"
          git push origin main --follow-tags

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_bump.outputs.version }}
          release_name: Release ${{ steps.version_bump.outputs.version }}
          body: "Automatic version bump: ${{ steps.version_bump.outputs.version }}"

  build-image:
    name: Build and publish Docker images
    needs: version_bump
    # environment:
    #   name: github-pages
    #   url: ${{ steps.deployment.outputs.page_url }}
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/airwalk-digital/mdx-deck

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            "FONTAWESOME_NPM_AUTH_TOKEN=${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}"
          
      
      # - name: Export Documentation
      #   run: |
      #     docker run --rm --entrypoint cat ghcr.io/airwalk-digital/mdxp:latest  /mdxp/dist/onepage/index.html > ./docs/index.html    
     
      # - name: Setup Pages
      #   uses: actions/configure-pages@v2
     
      # - name: Upload artifact
      #   uses: actions/upload-pages-artifact@v1
      #   with:
      #     path: './docs'
     
      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v1