name: Version Bump

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write


jobs: 

  version_bump:
    name: Bump Version
    runs-on: ubuntu-latest
    # if: github.event.pull_request.merged == true
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install semver

      # - name: Bump version based on PR info (version.txt)
      #   id: version_bump
      #   run: |
      #     PR_TITLE="${{ github.event.pull_request.title }}"
      #     PR_BODY="${{ github.event.pull_request.body }}"
      #     VERSION_TYPE="patch"
      #     if [[ "$PR_TITLE" == *"[major]"* ]] || [[ "$PR_BODY" == *"[major]"* ]]; then
      #       VERSION_TYPE="major"
      #     fi
      #     echo "Bumping $VERSION_TYPE version"
      #     CURRENT_VERSION=$(cat version.txt)
      #     NEW_VERSION=$(python -c "import semver; print(semver.bump_$VERSION_TYPE('$CURRENT_VERSION'))")
      #     echo $NEW_VERSION > version.txt
      #     echo "::set-output name=version::$NEW_VERSION"

      - name: Bump version based on PR info (package.json)
        id: version_bump
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        shell: python
        run: |          
          import json, semver, os
          with open('./package.json', 'r') as f:
            package_json = json.load(f)
            current_version = package_json['version']
            if '[major]' in os.environ.get('PR_TITLE'):
              new_version = semver.bump_major(current_version)
            else:
              new_version = semver.bump_patch(current_version)
            package_json['version'] = new_version
          with open('./package.json', 'w') as f:
            json.dump(package_json, f, indent=2)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'{"version"}={new_version}', file=fh)

      - name: Create version update branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          git checkout -b version-update-${{ steps.version_bump.outputs.version }}

      - name: Commit and tag new version
        run: |
          git add .
          git commit -m "Automatic version update to ${{ steps.version_bump.outputs.version }}"
          git tag "v${{ steps.version_bump.outputs.version }}"
          git push --set-upstream origin version-update-${{ steps.version_bump.outputs.version }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_bump.outputs.version }}
          release_name: Release ${{ steps.version_bump.outputs.version }}
          body: "Automatic version bump: ${{ steps.version_bump.outputs.version }}"
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: version-update-${{ steps.increment_version.outputs.version }}
          title: "Automatic version update to ${{ steps.increment_version.outputs.version }}"
          labels: auto-version-update
          base: main
          
  
